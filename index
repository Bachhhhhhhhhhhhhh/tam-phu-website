<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tam Ph·ªß 3D - Th·∫ø Gi·ªõi T√¢m Linh Huy·ªÅn B√≠</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Philosopher:wght@400;700&family=Crimson+Text:wght@400;600&family=Dancing+Script:wght@700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        :root {
            --primary-gold: #ffd700;
            --secondary-orange: #ff8c00;
            --accent-red: #ff6b6b;
            --dark-blue: #1a1a2e;
            --medium-blue: #16213e;
            --light-blue: #0f3460;
            --mystical-purple: #6a4c93;
        }
        
        body {
            font-family: 'Crimson Text', serif;
            background: linear-gradient(135deg, var(--dark-blue) 0%, var(--medium-blue) 50%, var(--light-blue) 100%);
            color: #fff;
            overflow-x: hidden;
            cursor: none;
        }
        
        /* Custom Cursor */
        .custom-cursor {
            position: fixed;
            width: 20px;
            height: 20px;
            border: 2px solid var(--primary-gold);
            border-radius: 50%;
            pointer-events: none;
            z-index: 10000;
            transition: all 0.1s ease;
            mix-blend-mode: difference;
        }
        
        .custom-cursor::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 4px;
            height: 4px;
            background: var(--primary-gold);
            border-radius: 50%;
            transform: translate(-50%, -50%);
        }
        
        .custom-cursor.hover {
            width: 40px;
            height: 40px;
            background: rgba(255, 215, 0, 0.2);
        }
        
        /* 3D Scene Background */
        .scene-3d {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -2;
            background: 
                radial-gradient(circle at 20% 50%, rgba(255, 215, 0, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 69, 0, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 40% 80%, rgba(255, 105, 180, 0.1) 0%, transparent 50%),
                conic-gradient(from 0deg at 50% 50%, transparent, rgba(106, 76, 147, 0.1), transparent);
            animation: scene3dRotate 30s infinite linear;
        }
        
        @keyframes scene3dRotate {
            0% { transform: rotate(0deg) scale(1); }
            50% { transform: rotate(180deg) scale(1.1); }
            100% { transform: rotate(360deg) scale(1); }
        }
        
        /* Floating Elements */
        .floating-elements {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }
        
        .floating-symbol {
            position: absolute;
            font-size: 2rem;
            opacity: 0.1;
            animation: float-symbol 20s infinite linear;
            color: var(--primary-gold);
        }
        
        @keyframes float-symbol {
            0% {
                transform: translateY(100vh) rotate(0deg);
                opacity: 0;
            }
            10% { opacity: 0.3; }
            90% { opacity: 0.3; }
            100% {
                transform: translateY(-100vh) rotate(360deg);
                opacity: 0;
            }
        }
        
        /* Advanced Navigation */
        nav {
            position: fixed;
            top: 0;
            width: 100%;
            background: rgba(26, 26, 46, 0.8);
            backdrop-filter: blur(20px);
            z-index: 1000;
            padding: 1rem 0;
            border-bottom: 2px solid rgba(255, 215, 0, 0.3);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }
        
        .nav-container {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 2rem;
        }
        
        .logo {
            font-family: 'Dancing Script', cursive;
            font-size: 2.5rem;
            font-weight: bold;
            background: linear-gradient(45deg, var(--primary-gold), var(--secondary-orange), var(--accent-red));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 0 30px rgba(255, 215, 0, 0.5);
            position: relative;
        }
        
        .logo::before {
            content: 'üèÆ';
            position: absolute;
            left: -3rem;
            top: 50%;
            transform: translateY(-50%);
            font-size: 2rem;
            animation: lantern-swing 3s ease-in-out infinite;
        }
        
        @keyframes lantern-swing {
            0%, 100% { transform: translateY(-50%) rotate(-5deg); }
            50% { transform: translateY(-50%) rotate(5deg); }
        }
        
        .nav-links {
            display: flex;
            list-style: none;
            gap: 2rem;
        }
        
        .nav-links a {
            color: #fff;
            text-decoration: none;
            font-weight: 600;
            padding: 0.8rem 1.5rem;
            border-radius: 25px;
            position: relative;
            overflow: hidden;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            background: linear-gradient(45deg, transparent, transparent);
        }
        
        .nav-links a::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 215, 0, 0.3), transparent);
            transition: left 0.6s ease;
        }
        
        .nav-links a::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            width: 0;
            height: 2px;
            background: linear-gradient(90deg, var(--primary-gold), var(--secondary-orange));
            transition: all 0.4s ease;
            transform: translateX(-50%);
        }
        
        .nav-links a:hover::before {
            left: 100%;
        }
        
        .nav-links a:hover::after {
            width: 100%;
        }
        
        .nav-links a:hover {
            color: var(--primary-gold);
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(255, 215, 0, 0.3);
        }
        
        /* Epic Hero Section */
        .hero {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            padding: 0 2rem;
            position: relative;
            overflow: hidden;
            perspective: 1000px;
        }
        
        .hero::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="temple" x="0" y="0" width="50" height="50" patternUnits="userSpaceOnUse"><polygon points="25,10 40,25 25,40 10,25" fill="rgba(255,215,0,0.05)" stroke="rgba(255,215,0,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23temple)"/></svg>');
            animation: temple-pattern 25s infinite linear;
            opacity: 0.6;
        }
        
        @keyframes temple-pattern {
            0% { transform: translateX(0) translateY(0); }
            100% { transform: translateX(50px) translateY(50px); }
        }
        
        .hero-content {
            max-width: 900px;
            z-index: 1;
            position: relative;
            transform-style: preserve-3d;
            animation: hero-float 6s ease-in-out infinite;
        }
        
        @keyframes hero-float {
            0%, 100% { transform: translateY(0px) rotateX(0deg); }
            50% { transform: translateY(-20px) rotateX(2deg); }
        }
        
        .hero h1 {
            font-family: 'Philosopher', serif;
            font-size: 5rem;
            margin-bottom: 1.5rem;
            background: linear-gradient(45deg, var(--primary-gold), var(--secondary-orange), var(--accent-red), var(--mystical-purple));
            background-size: 400% 400%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: gradient-shift 4s ease-in-out infinite, title-glow 3s ease-in-out infinite alternate;
            text-shadow: 0 0 50px rgba(255, 215, 0, 0.8);
            transform: perspective(500px) rotateX(10deg);
        }
        
        @keyframes gradient-shift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }
        
        @keyframes title-glow {
            0% { 
                text-shadow: 0 0 30px rgba(255, 215, 0, 0.5);
                transform: perspective(500px) rotateX(10deg) scale(1);
            }
            100% { 
                text-shadow: 0 0 60px rgba(255, 215, 0, 1), 0 0 90px rgba(255, 140, 0, 0.5);
                transform: perspective(500px) rotateX(10deg) scale(1.02);
            }
        }
        
        .hero-subtitle {
            font-size: 1.8rem;
            margin-bottom: 2rem;
            opacity: 0.9;
            line-height: 1.8;
            animation: subtitle-wave 4s ease-in-out infinite;
        }
        
        @keyframes subtitle-wave {
            0%, 100% { transform: translateY(0px); }
            25% { transform: translateY(-5px); }
            75% { transform: translateY(5px); }
        }
        
        .cta-buttons {
            display: flex;
            gap: 2rem;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 3rem;
        }
        
        .cta-button {
            display: inline-block;
            padding: 1.2rem 2.5rem;
            background: linear-gradient(45deg, var(--primary-gold), var(--secondary-orange));
            color: var(--dark-blue);
            text-decoration: none;
            border-radius: 50px;
            font-weight: bold;
            font-size: 1.2rem;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            box-shadow: 0 15px 35px rgba(255, 215, 0, 0.3);
            border: 2px solid transparent;
        }
        
        .cta-button.secondary {
            background: transparent;
            color: var(--primary-gold);
            border: 2px solid var(--primary-gold);
        }
        
        .cta-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            transition: left 0.6s ease;
        }
        
        .cta-button:hover::before {
            left: 100%;
        }
        
        .cta-button:hover {
            transform: translateY(-8px) scale(1.05);
            box-shadow: 0 25px 50px rgba(255, 215, 0, 0.5);
        }
        
        .cta-button.secondary:hover {
            background: var(--primary-gold);
            color: var(--dark-blue);
        }
        
        /* 3D Cards Grid */
        .tam-phu-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 3rem;
            padding: 6rem 2rem;
            max-width: 1400px;
            margin: 0 auto;
            perspective: 1000px;
        }
        
        .phu-card {
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid rgba(255, 215, 0, 0.3);
            border-radius: 25px;
            padding: 3rem;
            text-align: center;
            transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(15px);
            transform-style: preserve-3d;
            cursor: pointer;
        }
        
        .phu-card::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: conic-gradient(from 0deg, transparent, rgba(255, 215, 0, 0.1), transparent, rgba(255, 140, 0, 0.1), transparent);
            animation: card-rotate 25s linear infinite;
            opacity: 0;
            transition: opacity 0.6s ease;
        }
        
        .phu-card::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, transparent, rgba(255, 215, 0, 0.05), transparent);
            opacity: 0;
            transition: opacity 0.6s ease;
        }
        
        .phu-card:hover::before,
        .phu-card:hover::after {
            opacity: 1;
        }
        
        @keyframes card-rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .phu-card:hover {
            transform: translateY(-15px) rotateX(10deg) rotateY(5deg) scale(1.05);
            border-color: var(--primary-gold);
            box-shadow: 
                0 30px 60px rgba(255, 215, 0, 0.3),
                0 0 100px rgba(255, 215, 0, 0.2);
        }
        
        .phu-icon {
            font-size: 5rem;
            margin-bottom: 1.5rem;
            display: block;
            background: linear-gradient(45deg, var(--primary-gold), var(--secondary-orange), var(--accent-red));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: icon-pulse 3s ease-in-out infinite;
            position: relative;
            z-index: 1;
        }
        
        @keyframes icon-pulse {
            0%, 100% { 
                transform: scale(1) rotate(0deg);
                filter: drop-shadow(0 0 20px rgba(255, 215, 0, 0.5));
            }
            50% { 
                transform: scale(1.1) rotate(5deg);
                filter: drop-shadow(0 0 30px rgba(255, 215, 0, 0.8));
            }
        }
        
        .phu-card h3 {
            font-family: 'Philosopher', serif;
            font-size: 2.5rem;
            margin-bottom: 1.5rem;
            color: var(--primary-gold);
            position: relative;
            z-index: 1;
            text-shadow: 0 0 20px rgba(255, 215, 0, 0.5);
        }
        
        .phu-card p {
            line-height: 1.8;
            opacity: 0.9;
            position: relative;
            z-index: 1;
            font-size: 1.1rem;
        }
        
        /* Interactive 3D Deity Gallery */
        .interactive-section {
            padding: 6rem 2rem;
            text-align: center;
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(15px);
            position: relative;
        }
        
        .interactive-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                linear-gradient(45deg, transparent 49%, rgba(255, 215, 0, 0.1) 50%, transparent 51%),
                linear-gradient(-45deg, transparent 49%, rgba(255, 140, 0, 0.1) 50%, transparent 51%);
            background-size: 20px 20px;
            animation: pattern-move 10s linear infinite;
            opacity: 0.3;
        }
        
        @keyframes pattern-move {
            0% { background-position: 0 0, 0 0; }
            100% { background-position: 20px 20px, -20px 20px; }
        }
        
        .section-title {
            font-family: 'Philosopher', serif;
            font-size: 4rem;
            margin-bottom: 3rem;
            background: linear-gradient(45deg, var(--primary-gold), var(--secondary-orange), var(--mystical-purple));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            position: relative;
            z-index: 1;
            animation: title-float 4s ease-in-out infinite;
        }
        
        @keyframes title-float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        .deity-gallery {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2.5rem;
            max-width: 1200px;
            margin: 0 auto;
            perspective: 1000px;
        }
        
        .deity-card {
            background: rgba(255, 255, 255, 0.08);
            border: 2px solid rgba(255, 215, 0, 0.2);
            border-radius: 20px;
            padding: 2rem;
            transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(10px);
            transform-style: preserve-3d;
        }
        
        .deity-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, transparent, rgba(255, 215, 0, 0.1), transparent);
            transform: translateX(-100%) skewX(-15deg);
            transition: transform 0.8s ease;
        }
        
        .deity-card:hover::before {
            transform: translateX(100%) skewX(-15deg);
        }
        
        .deity-card:hover {
            transform: translateY(-10px) rotateX(10deg) scale(1.05);
            border-color: var(--primary-gold);
            box-shadow: 
                0 20px 40px rgba(255, 215, 0, 0.3),
                0 0 60px rgba(255, 215, 0, 0.2);
        }
        
        .deity-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: linear-gradient(45deg, var(--primary-gold), var(--secondary-orange));
            margin: 0 auto 1.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5rem;
            position: relative;
            z-index: 1;
            box-shadow: 
                0 0 30px rgba(255, 215, 0, 0.5),
                inset 0 0 20px rgba(255, 255, 255, 0.2);
            animation: avatar-glow 3s ease-in-out infinite alternate;
        }
        
        @keyframes avatar-glow {
            0% { box-shadow: 0 0 30px rgba(255, 215, 0, 0.5), inset 0 0 20px rgba(255, 255, 255, 0.2); }
            100% { box-shadow: 0 0 50px rgba(255, 215, 0, 0.8), inset 0 0 30px rgba(255, 255, 255, 0.3); }
        }
        
        .deity-name {
            font-weight: bold;
            color: var(--primary-gold);
            margin-bottom: 0.5rem;
            position: relative;
            z-index: 1;
            font-size: 1.3rem;
        }
        
        .deity-title {
            font-size: 1rem;
            opacity: 0.8;
            position: relative;
            z-index: 1;
        }
        
        /* Virtual Altar Section */
        .virtual-altar {
            padding: 6rem 2rem;
            background: radial-gradient(circle at center, rgba(106, 76, 147, 0.2) 0%, transparent 70%);
            text-align: center;
            position: relative;
        }
        
        .altar-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.05);
            border: 3px solid rgba(255, 215, 0, 0.3);
            border-radius: 30px;
            padding: 4rem;
            backdrop-filter: blur(15px);
            position: relative;
            overflow: hidden;
        }
        
        .altar-container::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: conic-gradient(from 0deg, rgba(255, 215, 0, 0.1), transparent, rgba(255, 215, 0, 0.1), transparent);
            animation: altar-aura 20s linear infinite;
        }
        
        @keyframes altar-aura {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .altar-title {
            font-family: 'Philosopher', serif;
            font-size: 3rem;
            color: var(--primary-gold);
            margin-bottom: 2rem;
            position: relative;
            z-index: 1;
        }
        
        .incense-sticks {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin: 2rem 0;
            position: relative;
            z-index: 1;
        }
        
        .incense-stick {
            width: 6px;
            height: 80px;
            background: linear-gradient(to top, #8B4513, #CD853F);
            border-radius: 3px;
            position: relative;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .incense-stick::before {
            content: '';
            position: absolute;
            top: -10px;
            left: 50%;
            width: 2px;
            height: 20px;
            background: var(--secondary-orange);
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .incense-stick.lit::before {
            opacity: 1;
            animation: flame-flicker 1s ease-in-out infinite alternate;
        }
        
        .incense-stick.lit::after {
            content: '';
            position: absolute;
            top: -30px;
            left: 50%;
            width: 20px;
            height: 40px;
            background: radial-gradient(circle, rgba(255, 255, 255, 0.3) 0%, transparent 70%);
            transform: translateX(-50%);
            animation: smoke-rise 3s ease-out infinite;
        }
        
        @keyframes flame-flicker {
            0% { transform: translateX(-50%) scale(1); }
            100% { transform: translateX(-50%) scale(1.2); }
        }
        
        @keyframes smoke-rise {
            0% { 
                opacity: 0.8;
                transform: translateX(-50%) translateY(0) scale(0.5);
            }
            100% { 
                opacity: 0;
                transform: translateX(-50%) translateY(-50px) scale(1.5);
            }
        }
        
        .prayer-button {
            background: linear-gradient(45deg, var(--mystical-purple), var(--accent-red));
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 25px;
            font-size: 1.2rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            z-index: 1;
            margin-top: 2rem;
        }
        
        .prayer-button:hover {
            transform: scale(1.05);
            box-shadow: 0 10px 30px rgba(106, 76, 147, 0.5);
        }
        
        /* Audio Visualization */
        .audio-section {
            padding: 4rem 2rem;
            text-align: center;
            background: rgba(0, 0, 0, 0.2);
        }
        
        .audio-visualizer {
            display: flex;
            justify-content: center;
            align-items: end;
            gap: 3px;
            height: 100px;
            margin: 2rem 0;
        }
        
        .audio-bar {
            width: 4px;
            background: linear-gradient(to top, var(--mystical-purple), var(--primary-gold));
            border-radius: 2px;
            animation: audio-pulse 1s ease-in-out infinite alternate;
        }
        
        .audio-bar:nth-child(odd) {
            animation-delay: 0.1s;
        }
        
        .audio-bar:nth-child(even) {
            animation-delay: 0.3s;
        }
        
        @keyframes audio-pulse {
            0% { height: 10px; }
            100% { height: 80px; }
        }
        
        .audio-controls {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 2rem;
        }
        
        .audio-button {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(45deg, var(--primary-gold), var(--secondary-orange));
            border: none;
            color: var(--dark-blue);
            font-size: 1.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .audio-button:hover {
            transform: scale(1.1);
            box-shadow: 0 10px 25px rgba(255, 215, 0, 0.4);
        }
        
        /* Advanced Footer */
        footer {
            background: linear-gradient(135deg, rgba(26, 26, 46, 0.9), rgba(22, 33, 62, 0.9));
            padding: 4rem 2rem 2rem;
            position: relative;
            overflow: hidden;
        }
        
        footer::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, transparent, var(--primary-gold), transparent);
        }
        
        .footer-content {
            max-width: 1200px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 3rem;
            text-align: center;
        }
        
        .footer-section h3 {
            font-family: 'Philosopher', serif;
            color: var(--primary-gold);
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
        }
        
        .footer-section p {
            opacity: 0.8;
            line-height: 1.6;
            margin-bottom: 1rem;
        }
        
        .social-links {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 2rem;
        }
        
        .social-link {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: rgba(255, 215, 0, 0.1);
            border: 2px solid rgba(255, 215, 0, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary-gold);
            text-decoration: none;
            font-size: 1.2rem;
            transition: all 0.3s ease;
        }
        
        .social-link:hover {
            background: var(--primary-gold);
            color: var(--dark-blue);
            transform: scale(1.1) rotate(10deg);
        }
        
        /* Mini Game Section */
        .mini-game {
            padding: 6rem 2rem;
            text-align: center;
            background: radial-gradient(circle at center, rgba(255, 69, 0, 0.1) 0%, transparent 70%);
        }
        
        .game-container {
            max-width: 600px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid rgba(255, 215, 0, 0.3);
            border-radius: 25px;
            padding: 3rem;
            backdrop-filter: blur(15px);
        }
        
        .game-title {
            font-family: 'Philosopher', serif;
            font-size: 2.5rem;
            color: var(--primary-gold);
            margin-bottom: 2rem;
        }
        
        .fortune-wheel {
            width: 300px;
            height: 300px;
            border-radius: 50%;
            background: conic-gradient(
                from 0deg,
                var(--primary-gold) 0deg 60deg,
                var(--secondary-orange) 60deg 120deg,
                var(--accent-red) 120deg 180deg,
                var(--mystical-purple) 180deg 240deg,
                var(--primary-gold) 240deg 300deg,
                var(--secondary-orange) 300deg 360deg
            );
            margin: 2rem auto;
            position: relative;
            cursor: pointer;
            transition: transform 3s cubic-bezier(0.4, 0, 0.2, 1);
            border: 5px solid rgba(255, 255, 255, 0.3);
        }
        
        .fortune-wheel::before {
            content: '‚ñº';
            position: absolute;
            top: -20px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 2rem;
            color: var(--primary-gold);
        }
        
        .fortune-wheel::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            background: white;
            border-radius: 50%;
            transform: translate(-50%, -50%);
        }
        
        .fortune-texts {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin: 2rem 0;
        }
        
        .fortune-text {
            padding: 1rem;
            background: rgba(255, 215, 0, 0.1);
            border-radius: 10px;
            font-size: 0.9rem;
        }
        
        .spin-button {
            background: linear-gradient(45deg, var(--primary-gold), var(--secondary-orange));
            color: var(--dark-blue);
            border: none;
            padding: 1rem 2rem;
            border-radius: 25px;
            font-size: 1.1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .spin-button:hover {
            transform: scale(1.05);
            box-shadow: 0 10px 30px rgba(255, 215, 0, 0.4);
        }
        
        .spin-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        /* Knowledge Quiz */
        .quiz-section {
            padding: 4rem 2rem;
            background: rgba(0, 0, 0, 0.2);
        }
        
        .quiz-container {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
        }
        
        .quiz-question {
            font-size: 1.5rem;
            margin-bottom: 2rem;
            padding: 2rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            border: 2px solid rgba(255, 215, 0, 0.3);
        }
        
        .quiz-options {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .quiz-option {
            padding: 1rem;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 215, 0, 0.2);
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .quiz-option:hover {
            background: rgba(255, 215, 0, 0.2);
            border-color: var(--primary-gold);
        }
        
        .quiz-option.correct {
            background: rgba(0, 255, 0, 0.2);
            border-color: #00ff00;
        }
        
        .quiz-option.wrong {
            background: rgba(255, 0, 0, 0.2);
            border-color: #ff0000;
        }
        
        .quiz-score {
            font-size: 1.5rem;
            color: var(--primary-gold);
            margin: 2rem 0;
        }
        
        /* Advanced Animations */
        @keyframes mystical-entrance {
            0% {
                opacity: 0;
                transform: translateY(100px) scale(0.8) rotateX(90deg);
            }
            50% {
                opacity: 0.5;
                transform: translateY(50px) scale(0.9) rotateX(45deg);
            }
            100% {
                opacity: 1;
                transform: translateY(0) scale(1) rotateX(0deg);
            }
        }
        
        .mystical-entrance {
            animation: mystical-entrance 1s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .hero h1 {
                font-size: 3rem;
            }
            
            .hero-subtitle {
                font-size: 1.3rem;
            }
            
            .nav-links {
                display: none;
            }
            
            .tam-phu-grid {
                grid-template-columns: 1fr;
                padding: 3rem 1rem;
                gap: 2rem;
            }
            
            .phu-card {
                padding: 2rem;
            }
            
            .section-title {
                font-size: 2.5rem;
            }
            
            .deity-gallery {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1.5rem;
            }
            
            .cta-buttons {
                flex-direction: column;
                align-items: center;
            }
            
            .fortune-wheel {
                width: 250px;
                height: 250px;
            }
            
            .quiz-options {
                grid-template-columns: 1fr;
            }
        }
        
        /* Dark Mode Toggle */
        .theme-toggle {
            position: fixed;
            top: 50%;
            right: 2rem;
            transform: translateY(-50%);
            width: 60px;
            height: 120px;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 215, 0, 0.3);
            border-radius: 30px;
            backdrop-filter: blur(10px);
            z-index: 1000;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .theme-toggle:hover {
            background: rgba(255, 215, 0, 0.2);
        }
        
        .theme-toggle::before {
            content: 'üåô';
            position: absolute;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 1.5rem;
        }
        
        .theme-toggle::after {
            content: '‚òÄÔ∏è';
            position: absolute;
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 1.5rem;
        }
        
        .theme-indicator {
            position: absolute;
            width: 40px;
            height: 40px;
            background: linear-gradient(45deg, var(--primary-gold), var(--secondary-orange));
            border-radius: 50%;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .light-mode .theme-indicator {
            top: 70px;
        }
        
        /* Loading Screen */
        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, var(--dark-blue), var(--medium-blue));
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            opacity: 1;
            transition: opacity 1s ease-out;
        }
        
        .loading-screen.hidden {
            opacity: 0;
            pointer-events: none;
        }
        
        .loading-lotus {
            width: 100px;
            height: 100px;
            background: var(--primary-gold);
            border-radius: 50%;
            position: relative;
            animation: lotus-bloom 2s ease-in-out infinite;
        }
        
        @keyframes lotus-bloom {
            0%, 100% {
                transform: scale(1) rotate(0deg);
                border-radius: 50%;
            }
            50% {
                transform: scale(1.2) rotate(180deg);
                border-radius: 30%;
            }
        }
        
        .loading-text {
            margin-top: 2rem;
            font-family: 'Philosopher', serif;
            font-size: 1.5rem;
            color: var(--primary-gold);
            animation: loading-pulse 1.5s ease-in-out infinite;
        }
        
        @keyframes loading-pulse {
            0%, 100% { opacity: 0.5; }
            50% { opacity: 1; }
        }
    </style>
</head>
<body>
    <!-- Loading Screen -->
    <div class="loading-screen" id="loadingScreen">
        <div class="loading-lotus"></div>
        <div class="loading-text">ƒêang k·∫øt n·ªëi v·ªõi th·∫ø gi·ªõi t√¢m linh...</div>
    </div>
    
    <!-- Custom Cursor -->
    <div class="custom-cursor" id="cursor"></div>
    
    <!-- 3D Background Scene -->
    <div class="scene-3d"></div>
    
    <!-- Floating Mystical Elements -->
    <div class="floating-elements" id="floatingElements"></div>
    
    <!-- Theme Toggle -->
    <div class="theme-toggle" id="themeToggle">
        <div class="theme-indicator"></div>
    </div>
    
    <nav>
        <div class="nav-container">
            <div class="logo">Tam Ph·ªß Huy·ªÅn B√≠</div>
            <ul class="nav-links">
                <li><a href="#home">Trang Ch·ªß</a></li>
                <li><a href="#tam-phu">Tam Ph·ªß</a></li>
                <li><a href="#than-linh">Th·∫ßn Linh</a></li>
                <li><a href="#virtual-altar">B√†n Th·ªù</a></li>
                <li><a href="#mini-game">Tr√≤ Ch∆°i</a></li>
                <li><a href="#quiz">Ki·∫øn Th·ª©c</a></li>
            </ul>
        </div>
    </nav>
    
    <section class="hero" id="home">
        <div class="hero-content">
            <h1>Th·∫ø Gi·ªõi Tam Ph·ªß</h1>
            <p class="hero-subtitle">H√†nh tr√¨nh kh√°m ph√° b√≠ ·∫©n t√¢m linh c·ªßa ƒê·∫°o M·∫´u Vi·ªát Nam trong kh√¥ng gian 3D t∆∞∆°ng t√°c. Tr·∫£i nghi·ªám nh·ªØng nghi l·ªÖ thi√™ng li√™ng, g·∫∑p g·ª° c√°c v·ªã th·∫ßn linh, v√† t√¨m hi·ªÉu v·ªÅ vƒÉn h√≥a t√≠n ng∆∞·ª°ng s√¢u s·∫Øc c·ªßa d√¢n t·ªôc.</p>
            <div class="cta-buttons">
                <a href="#tam-phu" class="cta-button">üöÄ Kh√°m Ph√° Ngay</a>
                <a href="#virtual-altar" class="cta-button secondary">üèÆ B√†n Th·ªù ·∫¢o</a>
            </div>
        </div>
    </section>
    
    <section class="tam-phu-grid mystical-entrance" id="tam-phu">
        <div class="phu-card" data-phu="thien">
            <span class="phu-icon">üåü</span>
            <h3>Thi√™n Ph·ªß</h3>
            <p>Cung ƒëi·ªán cao v·ªùi c·ªßa c√°c v·ªã th·∫ßn linh t·ªëi cao. N∆°i ƒë√¢y cai qu·∫£n v·ªÅ tr·ªùi, m√¢y, s·∫•m ch·ªõp v√† ƒë·ªãnh m·ªánh c·ªßa con ng∆∞·ªùi. C√°c v·ªã M·∫´u Th∆∞·ª£ng Thi√™n v·ªõi quy·ªÅn nƒÉng v√¥ bi√™n, che ch·ªü v√† ban ph∆∞·ªõc l√†nh cho mu√¥n lo√†i.</p>
        </div>
        
        <div class="phu-card" data-phu="dia">
            <span class="phu-icon">üèîÔ∏è</span>
            <h3>ƒê·ªãa Ph·ªß</h3>
            <p>V∆∞∆°ng qu·ªëc r·ªông l·ªõn c·ªßa ƒë·∫•t ƒëai v√† n√∫i r·ª´ng. N∆°i c√°c v·ªã th·∫ßn b·∫£o v·ªá l√†ng x√≥m, canh gi·ªØ m√πa m√†ng, v√† ch·ªü che cu·ªôc s·ªëng th∆∞·ªùng nh·∫≠t. M·∫´u Tho·∫°i c√πng c√°c v·ªã th·∫ßn n√∫i r·ª´ng lu√¥n ph√π h·ªô d√¢n l√†nh.</p>
        </div>
        
        <div class="phu-card" data-phu="thuy">
            <span class="phu-icon">üåä</span>
            <h3>Th·ªßy Ph·ªß</h3>
            <p>Th·∫ø gi·ªõi m√™nh m√¥ng c·ªßa n∆∞·ªõc v√† bi·ªÉn c·∫£. C√°c v·ªã th·∫ßn n∆°i ƒë√¢y cai qu·∫£n s√¥ng ng√≤i, m∆∞a m√≥c, v√† b·∫£o v·ªá nh·ªØng ng∆∞·ªùi ƒëi bi·ªÉn. M·∫´u Th·ªßy c√πng Long V∆∞∆°ng ban t·∫∑ng ngu·ªìn n∆∞·ªõc sinh th·ªßy cho mu√¥n lo√†i.</p>
        </div>
    </section>
    
    <section class="interactive-section mystical-entrance" id="than-linh">
        <h2 class="section-title">üèÆ Th·∫ßn Linh Tam Ph·ªß</h2>
        <div class="deity-gallery">
            <div class="deity-card" data-deity="mau-thuong-thien">
                <div class="deity-avatar">üëë</div>
                <div class="deity-name">M·∫´u Th∆∞·ª£ng Thi√™n</div>
                <div class="deity-title">Ch·ªß Thi√™n Ph·ªß - N·ªØ th·∫ßn t·ªëi cao</div>
            </div>
            
            <div class="deity-card" data-deity="mau-thoai">
                <div class="deity-avatar">üè∞</div>
                <div class="deity-name">M·∫´u Tho·∫°i</div>
                <div class="deity-title">Ch·ªß ƒê·ªãa Ph·ªß - N·ªØ th·∫ßn ƒë·∫•t ƒëai</div>
            </div>
            
            <div class="deity-card" data-deity="mau-thuy">
                <div class="deity-avatar">üå∏</div>
                <div class="deity-name">M·∫´u Th·ªßy</div>
                <div class="deity-title">Ch·ªß Th·ªßy Ph·ªß - N·ªØ th·∫ßn bi·ªÉn c·∫£</div>
            </div>
            
            <div class="deity-card" data-deity="thanh-tran">
                <div class="deity-avatar">‚öîÔ∏è</div>
                <div class="deity-name">Th√°nh Tr·∫ßn</div>
                <div class="deity-title">V·ªã th√°nh b·∫£o v·ªá d√¢n l√†ng</div>
            </div>
            
            <div class="deity-card" data-deity="ong-hoang-bay">
                <div class="deity-avatar">ü¶Ö</div>
                <div class="deity-name">√îng Ho√†ng B·∫£y</div>
                <div class="deity-title">Th·∫ßn r·ª´ng n√∫i h√πng m·∫°nh</div>
            </div>
            
            <div class="deity-card" data-deity="ba-chua-xu">
                <div class="deity-avatar">üåô</div>
                <div class="deity-name">B√† Ch√∫a X·ª©</div>
                <div class="deity-title">Th·∫ßn n√∫i thi√™ng li√™ng</div>
            </div>
            
            <div class="deity-card" data-deity="quan-lon">
                <div class="deity-avatar">üêâ</div>
                <div class="deity-name">Quan L·ªõn</div>
                <div class="deity-title">Th·∫ßn bi·ªÉn phong ba</div>
            </div>
            
            <div class="deity-card" data-deity="co-be">
                <div class="deity-avatar">üßö</div>
                <div class="deity-name">C√¥ B√©</div>
                <div class="deity-title">Th·∫ßn tr·∫ª em v√† may m·∫Øn</div>
            </div>
        </div>
    </section>
    
    <section class="virtual-altar mystical-entrance" id="virtual-altar">
        <div class="altar-container">
            <h2 class="altar-title">üèÆ B√†n Th·ªù ·∫¢o Tam Ph·ªß</h2>
            <p>Th·∫Øp h∆∞∆°ng c·∫ßu an - K·∫øt n·ªëi t√¢m linh</p>
            
            <div class="incense-sticks" id="incenseSticks">
                <div class="incense-stick" data-prayer="binh-an"></div>
                <div class="incense-stick" data-prayer="thinh-vuong"></div>
                <div class="incense-stick" data-prayer="suc-khoe"></div>
                <div class="incense-stick" data-prayer="hoc-hanh"></div>
                <div class="incense-stick" data-prayer="tinh-duÏó∞"></div>
            </div>
            
            <button class="prayer-button" id="prayerButton">üôè C·∫ßu Kh·∫•n</button>
            <div id="prayerResult"></div>
        </div>
    </section>
    
    <section class="audio-section mystical-entrance">
        <h2 class="section-title">üéµ Nh·∫°c T√¢m Linh</h2>
        <div class="audio-visualizer" id="audioVisualizer"></div>
        <div class="audio-controls">
            <button class="audio-button" id="playBtn">‚ñ∂Ô∏è</button>
            <button class="audio-button" id="pauseBtn">‚è∏Ô∏è</button>
            <button class="audio-button" id="nextBtn">‚è≠Ô∏è</button>
        </div>
        <p>Th∆∞·ªüng th·ª©c nh·ªØng giai ƒëi·ªáu thi√™ng li√™ng c·ªßa h·∫ßu ƒë·ªìng</p>
    </section>
    
    <section class="mini-game mystical-entrance" id="mini-game">
        <div class="game-container">
            <h2 class="game-title">üé∞ B√°nh Xe V·∫≠n M·ªánh</h2>
            <p>Xoay b√°nh xe ƒë·ªÉ nh·∫≠n l·ªùi ti√™n tri t·ª´ c√°c v·ªã th·∫ßn linh</p>
            
            <div class="fortune-wheel" id="fortuneWheel"></div>
            
            <div class="fortune-texts">
                <div class="fortune-text">B√¨nh an trong gia ƒë√¨nh</div>
                <div class="fortune-text">Th·ªãnh v∆∞·ª£ng ph√°t t√†i</div>
                <div class="fortune-text">S·ª©c kh·ªèe d·ªìi d√†o</div>
                <div class="fortune-text">H·ªçc h√†nh ti·∫øn b·ªô</div>
                <div class="fortune-text">T√¨nh duy√™n vi√™n m√£n</div>
                <div class="fortune-text">C√¥ng vi·ªác th√†nh ƒë·∫°t</div>
            </div>
            
            <button class="spin-button" id="spinButton">üé≤ Xoay B√°nh Xe</button>
            <div id="fortuneResult"></div>
        </div>
    </section>
    
    <section class="quiz-section mystical-entrance" id="quiz">
        <div class="quiz-container">
            <h2 class="section-title">üìö Ki·∫øn Th·ª©c Tam Ph·ªß</h2>
            <div class="quiz-question" id="quizQuestion">ƒêang t·∫£i c√¢u h·ªèi...</div>
            <div class="quiz-options" id="quizOptions"></div>
            <div class="quiz-score" id="quizScore">ƒêi·ªÉm: 0/0</div>
            <button class="cta-button" id="nextQuestion">C√¢u ti·∫øp theo</button>
        </div>
    </section>
    
    <footer>
        <div class="footer-content">
            <div class="footer-section">
                <h3>üèÆ T√≠n Ng∆∞·ª°ng Tam Ph·ªß</h3>
                <p>G√¨n gi·ªØ v√† truy·ªÅn b√° nh·ªØng gi√° tr·ªã t√¢m linh truy·ªÅn th·ªëng, k·∫øt n·ªëi con ng∆∞·ªùi v·ªõi thi√™n nhi√™n v√† t·ªï ti√™n.</p>
                <div class="social-links">
                    <a href="#" class="social-link">üìò</a>
                    <a href="#" class="social-link">üì∑</a>
                    <a href="#" class="social-link">üê¶</a>
                    <a href="#" class="social-link">üì∫</a>
                </div>
            </div>
            
            <div class="footer-section">
                <h3>üåü Li√™n K·∫øt</h3>
                <p>‚Ä¢ ƒê·ªÅn ch√πa Tam Ph·ªß</p>
                <p>‚Ä¢ L·ªÖ h·ªôi h·∫ßu ƒë·ªìng</p>
                <p>‚Ä¢ VƒÉn h√≥a d√¢n gian</p>
                <p>‚Ä¢ T√¢m linh Vi·ªát Nam</p>
            </div>
            
            <div class="footer-section">
                <h3>üìû Li√™n H·ªá</h3>
                <p>üèõÔ∏è Trung t√¢m nghi√™n c·ª©u Tam Ph·ªß</p>
                <p>üìß contact@tamphu.vn</p>
                <p>üì± +84 999 888 777</p>
                <p>üåê www.tamphu3d.vn</p>
            </div>
        </div>
    </footer>
    
    <script>
        // Advanced JavaScript for Epic Interactions
        
        // Custom Cursor
        const cursor = document.getElementById('cursor');
        document.addEventListener('mousemove', (e) => {
            cursor.style.left = e.clientX + 'px';
            cursor.style.top = e.clientY + 'px';
        });
        
        document.addEventListener('mouseenter', () => {
            cursor.style.opacity = '1';
        });
        
        document.addEventListener('mouseleave', () => {
            cursor.style.opacity = '0';
        });
        
        // Hover effects for cursor
        const hoverElements = document.querySelectorAll('a, button, .deity-card, .phu-card, .incense-stick');
        hoverElements.forEach(el => {
            el.addEventListener('mouseenter', () => {
                cursor.classList.add('hover');
            });
            el.addEventListener('mouseleave', () => {
                cursor.classList.remove('hover');
            });
        });
        
        // Loading Screen
        window.addEventListener('load', () => {
            setTimeout(() => {
                document.getElementById('loadingScreen').classList.add('hidden');
            }, 2000);
        });
        
        // Floating Mystical Elements
        const floatingContainer = document.getElementById('floatingElements');
        const symbols = ['üèÆ', '‚≠ê', 'üå∏', 'ü¶ã', '‚ú®', 'üîÆ', 'ü™∑', 'üïäÔ∏è'];
        
        function createFloatingSymbol() {
            const symbol = document.createElement('div');
            symbol.className = 'floating-symbol';
            symbol.textContent = symbols[Math.floor(Math.random() * symbols.length)];
            symbol.style.left = Math.random() * 100 + '%';
            symbol.style.fontSize = (Math.random() * 2 + 1) + 'rem';
            symbol.style.animationDuration = (Math.random() * 15 + 15) + 's';
            symbol.style.animationDelay = Math.random() * 5 + 's';
            
            floatingContainer.appendChild(symbol);
            
            setTimeout(() => {
                symbol.remove();
            }, 30000);
        }
        
        setInterval(createFloatingSymbol, 2000);
        
        // Scroll Animations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('mystical-entrance');
                }
            });
        }, observerOptions);
        
        document.querySelectorAll('.phu-card, .deity-card, .virtual-altar, .mini-game').forEach(el => {
            observer.observe(el);
        });
        
        // Smooth Scrolling
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
        
        // Interactive Deity Cards
        const deityData = {
            'mau-thuong-thien': {
                name: 'M·∫´u Th∆∞·ª£ng Thi√™n',
                title: 'N·ªØ Th·∫ßn T·ªëi Cao c·ªßa Thi√™n Ph·ªß',
                description: 'V·ªã th·∫ßn n·ªØ cao qu√Ω nh·∫•t trong t√≠n ng∆∞·ª°ng Tam Ph·ªß, cai qu·∫£n to√†n b·ªô th·∫ø gi·ªõi t√¢m linh. B√† l√† bi·ªÉu t∆∞·ª£ng c·ªßa s·ª± t·ª´ bi, tr√≠ tu·ªá v√† quy·ªÅn nƒÉng t·ªëi th∆∞·ª£ng.',
                powers: ['Cai qu·∫£n tr·ªùi ƒë·∫•t', 'Ban ph∆∞·ªõc l√†nh', 'Ch·ªØa b·ªánh t·∫≠t', 'ƒê·ªô tr√¨ ch√∫ng sinh'],
                offerings: ['Hoa sen tr·∫Øng', 'Tr√°i c√¢y t∆∞∆°i', 'N∆∞·ªõc cam l·ªô', 'Nhang tr·∫ßm']
            },
            'mau-thoai': {
                name: 'M·∫´u Tho·∫°i',
                title: 'N·ªØ Th·∫ßn ƒê·∫•t ƒêai',
                description: 'Ch·ªß nh√¢n c·ªßa ƒê·ªãa Ph·ªß, b·∫£o v·ªá ƒë·∫•t ƒëai v√† con ng∆∞·ªùi. B√† mang l·∫°i th·ªãnh v∆∞·ª£ng cho n√¥ng nghi·ªáp v√† che ch·ªü cho nh·ªØng ng∆∞·ªùi lao ƒë·ªông.',
                powers: ['Cai qu·∫£n ƒë·∫•t ƒëai', 'B·∫£o v·ªá n√¥ng d√¢n', 'Ban m√πa m√†ng', 'Gi·ªØ g√¨n l√†ng x√≥m'],
                offerings: ['Hoa c√∫c v√†ng', 'G·∫°o t√°m xoan', 'Tr√† xanh', 'B√°nh ch∆∞ng']
            },
            'mau-thuy': {
                name: 'M·∫´u Th·ªßy',
                title: 'N·ªØ Th·∫ßn Bi·ªÉn C·∫£',
                description: 'V·ªã ch·ªß c·ªßa Th·ªßy Ph·ªß, cai qu·∫£n bi·ªÉn c·∫£ v√† s√¥ng ng√≤i. B√† ph√π h·ªô cho ng∆∞ d√¢n v√† nh·ªØng ng∆∞·ªùi ƒëi bi·ªÉn.',
                powers: ['Cai qu·∫£n n∆∞·ªõc bi·ªÉn', 'B·∫£o v·ªá ng∆∞ d√¢n', 'ƒêi·ªÅu h√≤a th·ªùi ti·∫øt', 'Ban ngu·ªìn n∆∞·ªõc'],
                offerings: ['Hoa sen h·ªìng', 'C√° t∆∞∆°i', 'R∆∞·ª£u n·∫øp', 'N∆∞·ªõc su·ªëi trong']
            },
            'thanh-tran': {
                name: 'Th√°nh Tr·∫ßn',
                title: 'V·ªã Th√°nh B·∫£o V·ªá',
                description: 'V·ªã th√°nh d≈©ng m√£nh, b·∫£o v·ªá d√¢n l√†ng kh·ªèi tai h·ªça v√† y√™u ma qu·ª∑ qu√°i. √îng l√† bi·ªÉu t∆∞·ª£ng c·ªßa l√≤ng d≈©ng c·∫£m v√† c√¥ng l√Ω.',
                powers: ['Tr·ª´ t√† ma', 'B·∫£o v·ªá d√¢n l√†ng', 'Mang l·∫°i c√¥ng l√Ω', 'Xua ƒëu·ªïi b·ªánh t·∫≠t'],
                offerings: ['G√† lu·ªôc', 'R∆∞·ª£u m·∫°nh', 'Hoa ƒë·ªè', 'Nhang n·ª•']
            },
            'ong-hoang-bay': {
                name: '√îng Ho√†ng B·∫£y',
                title: 'Th·∫ßn R·ª´ng N√∫i',
                description: 'V·ªã th·∫ßn cai qu·∫£n r·ª´ng n√∫i, b·∫£o v·ªá thi√™n nhi√™n v√† ƒë·ªông v·∫≠t hoang d√£. √îng ban ph√∫c cho nh·ªØng ng∆∞·ªùi th·ª£ sƒÉn v√† d√¢n mi·ªÅn n√∫i.',
                powers: ['Cai qu·∫£n r·ª´ng n√∫i', 'B·∫£o v·ªá ƒë·ªông v·∫≠t', 'Ban th·ªãnh v∆∞·ª£ng', 'Ch·ªØa b·ªánh b·∫±ng th·∫£o d∆∞·ª£c'],
                offerings: ['Tr√°i c√¢y r·ª´ng', 'Th·ªãt r·ª´ng', 'R∆∞·ª£u c·∫ßn', 'L√° dong']
            },
            'ba-chua-xu': {
                name: 'B√† Ch√∫a X·ª©',
                title: 'Th·∫ßn N√∫i Thi√™ng',
                description: 'N·ªØ th·∫ßn c·ªßa n√∫i Sam, b·∫£o v·ªá v√πng ƒë·∫•t An Giang. B√† l√† bi·ªÉu t∆∞·ª£ng c·ªßa s·ª± b·∫£o b·ªçc v√† l√≤ng t·ª´ bi.',
                powers: ['Cai qu·∫£n n√∫i Sam', 'B·∫£o v·ªá d√¢n ch√∫ng', 'Ban may m·∫Øn', 'Ch·ªØa b·ªánh hi·ªÉm ngh√®o'],
                offerings: ['B√°nh √≠t l√° gai', 'N∆∞·ªõc m·∫Øm', 'C∆°m d·∫ªo', 'Hoa b∆∞·ªüi']
            },
            'quan-lon': {
                name: 'Quan L·ªõn',
                title: 'Th·∫ßn Bi·ªÉn Phong Ba',
                description: 'V·ªã th·∫ßn cai qu·∫£n phong ba b√£o t√°p tr√™n bi·ªÉn. √îng c√≥ th·ªÉ c·ª©u nh·ªØng ng∆∞·ªùi g·∫∑p n·∫°n tr√™n bi·ªÉn.',
                powers: ['Cai qu·∫£n phong ba', 'C·ª©u n·∫°n tr√™n bi·ªÉn', 'ƒêi·ªÅu khi·ªÉn s√≥ng gi√≥', 'B·∫£o v·ªá t√†u thuy·ªÅn'],
                offerings: ['C√° c√∫ng', 'R∆∞·ª£u tr·∫Øng', 'Hoa s√∫ng', 'Mu·ªëi bi·ªÉn']
            },
            'co-be': {
                name: 'C√¥ B√©',
                title: 'Th·∫ßn May M·∫Øn',
                description: 'N·ªØ th·∫ßn tr·∫ª tu·ªïi, mang l·∫°i may m·∫Øn v√† b·∫£o v·ªá tr·∫ª em. C√¥ l√† bi·ªÉu t∆∞·ª£ng c·ªßa s·ª± trong s√°ng v√† hy v·ªçng.',
                powers: ['B·∫£o v·ªá tr·∫ª em', 'Mang may m·∫Øn', 'Ban s·ª± th√¥ng minh', 'Ch·ªØa b·ªánh cho tr·∫ª nh·ªè'],
                offerings: ['K·∫πo ng·ªçt', 'Hoa nh·ªè', 'S·ªØa t∆∞∆°i', 'ƒê·ªì ch∆°i']
            }
        };
        
        document.querySelectorAll('.deity-card').forEach(card => {
            card.addEventListener('click', function() {
                const deityId = this.dataset.deity;
                const deity = deityData[deityId];
                
                if (deity) {
                    showDeityModal(deity);
                }
            });
        });
        
        function showDeityModal(deity) {
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.9);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10000;
                backdrop-filter: blur(20px);
                animation: modalFadeIn 0.5s ease-out;
            `;
            
            modal.innerHTML = `
                <div style="
                    background: linear-gradient(135deg, var(--dark-blue), var(--medium-blue));
                    padding: 3rem;
                    border-radius: 25px;
                    text-align: center;
                    border: 3px solid var(--primary-gold);
                    max-width: 600px;
                    margin: 2rem;
                    max-height: 80vh;
                    overflow-y: auto;
                    position: relative;
                ">
                    <button onclick="this.parentElement.parentElement.remove()" style="
                        position: absolute;
                        top: 1rem;
                        right: 1rem;
                        background: none;
                        border: none;
                        color: var(--primary-gold);
                        font-size: 2rem;
                        cursor: pointer;
                        width: 40px;
                        height: 40px;
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,215,0,0.2)'" onmouseout="this.style.background='none'">√ó</button>
                    
                    <h3 style="color: var(--primary-gold); font-size: 2.5rem; margin-bottom: 0.5rem; font-family: 'Philosopher', serif;">${deity.name}</h3>
                    <h4 style="color: var(--secondary-orange); font-size: 1.3rem; margin-bottom: 2rem; opacity: 0.9;">${deity.title}</h4>
                    
                    <p style="color: #fff; line-height: 1.8; margin-bottom: 2rem; font-size: 1.1rem;">${deity.description}</p>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-bottom: 2rem;">
                        <div style="background: rgba(255,255,255,0.05); padding: 1.5rem; border-radius: 15px; border: 1px solid rgba(255,215,0,0.3);">
                            <h5 style="color: var(--primary-gold); margin-bottom: 1rem; font-size: 1.2rem;">‚ö° Quy·ªÅn NƒÉng</h5>
                            ${deity.powers.map(power => `<p style="color: #fff; margin: 0.5rem 0; font-size: 0.9rem;">‚Ä¢ ${power}</p>`).join('')}
                        </div>
                        <div style="background: rgba(255,255,255,0.05); padding: 1.5rem; border-radius: 15px; border: 1px solid rgba(255,215,0,0.3);">
                            <h5 style="color: var(--primary-gold); margin-bottom: 1rem; font-size: 1.2rem;">üéÅ L·ªÖ V·∫≠t</h5>
                            ${deity.offerings.map(offering => `<p style="color: #fff; margin: 0.5rem 0; font-size: 0.9rem;">‚Ä¢ ${offering}</p>`).join('')}
                        </div>
                    </div>
                    
                    <button onclick="performPrayer('${deity.name}')" style="
                        background: linear-gradient(45deg, var(--primary-gold), var(--secondary-orange));
                        color: var(--dark-blue);
                        border: none;
                        padding: 1rem 2rem;
                        border-radius: 25px;
                        font-weight: bold;
                        cursor: pointer;
                        font-size: 1.1rem;
                        transition: all 0.3s ease;
                        margin: 0 0.5rem;
                    " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">üôè C·∫ßu Kh·∫•n</button>
                    
                    <button onclick="learnMore('${deity.name}')" style="
                        background: transparent;
                        color: var(--primary-gold);
                        border: 2px solid var(--primary-gold);
                        padding: 1rem 2rem;
                        border-radius: 25px;
                        font-weight: bold;
                        cursor: pointer;
                        font-size: 1.1rem;
                        transition: all 0.3s ease;
                        margin: 0 0.5rem;
                    " onmouseover="this.style.background='var(--primary-gold)'; this.style.color='var(--dark-blue)'" onmouseout="this.style.background='transparent'; this.style.color='var(--primary-gold)'">üìö T√¨m Hi·ªÉu Th√™m</button>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    modal.remove();
                }
            });
        }
        
        // Virtual Altar Interactions
        document.querySelectorAll('.incense-stick').forEach(stick => {
            stick.addEventListener('click', function() {
                this.classList.toggle('lit');
                
                // Sound effect simulation
                if (this.classList.contains('lit')) {
                    showNotification('ƒê√£ th·∫Øp h∆∞∆°ng c·∫ßu ' + getPrayerText(this.dataset.prayer));
                } else {
                    showNotification('ƒê√£ t·∫Øt h∆∞∆°ng');
                }
            });
        });
        
        function getPrayerText(prayer) {
            const prayers = {
                'binh-an': 'b√¨nh an',
                'thinh-vuong': 'th·ªãnh v∆∞·ª£ng', 
                'suc-khoe': 's·ª©c kh·ªèe',
                'hoc-hanh': 'h·ªçc h√†nh ti·∫øn b·ªô',
                'tinh-duyen': 't√¨nh duy√™n'
            };
            return prayers[prayer] || 'may m·∫Øn';
        }
        
        document.getElementById('prayerButton').addEventListener('click', function() {
            const litSticks = document.querySelectorAll('.incense-stick.lit');
            if (litSticks.length === 0) {
                showNotification('H√£y th·∫Øp √≠t nh·∫•t m·ªôt n√©n h∆∞∆°ng tr∆∞·ªõc khi c·∫ßu kh·∫•n! üèÆ');
                return;
            }
            
            const prayers = Array.from(litSticks).map(stick => getPrayerText(stick.dataset.prayer));
            const prayerText = prayers.join(', ');
            
            const blessings = [
                `C√°c v·ªã th·∫ßn linh ƒë√£ nghe l·ªùi c·∫ßu kh·∫•n v·ªÅ ${prayerText}. Ph∆∞·ªõc l√†nh s·∫Ω ƒë·∫øn v·ªõi b·∫°n! ‚ú®`,
                `Tam Ph·ªß ban ph√∫c! L·ªùi c·∫ßu v·ªÅ ${prayerText} ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n. üåü`,
                `Th·∫ßn linh ph√π h·ªô! ${prayerText.charAt(0).toUpperCase() + prayerText.slice(1)} s·∫Ω ƒë∆∞·ª£c nh∆∞ √Ω. üôè`,
                `M·∫´u Th∆∞·ª£ng Thi√™n ban ph∆∞·ªõc! ƒêi·ªÅu ∆∞·ªõc v·ªÅ ${prayerText} s·∫Ω th√†nh hi·ªán th·ª±c. üëë`
            ];
            
            const blessing = blessings[Math.floor(Math.random() * blessings.length)];
            document.getElementById('prayerResult').innerHTML = `
                <div style="
                    background: rgba(255,215,0,0.1);
                    border: 2px solid var(--primary-gold);
                    border-radius: 15px;
                    padding: 1.5rem;
                    margin-top: 2rem;
                    animation: blessingGlow 2s ease-in-out infinite alternate;
                ">
                    <p style="color: var(--primary-gold); font-weight: bold; margin: 0;">${blessing}</p>
                </div>
            `;
            
            // Reset incense after prayer
            setTimeout(() => {
                litSticks.forEach(stick => stick.classList.remove('lit'));
                document.getElementById('prayerResult').innerHTML = '';
            }, 5000);
        });
        
        // Audio Visualization
        function createAudioBars() {
            const visualizer = document.getElementById('audioVisualizer');
            visualizer.innerHTML = '';
            
            for (let i = 0; i < 30; i++) {
                const bar = document.createElement('div');
                bar.className = 'audio-bar';
                bar.style.animationDelay = Math.random() * 2 + 's';
                bar.style.animationDuration = (Math.random() * 1 + 0.5) + 's';
                visualizer.appendChild(bar);
            }
        }
        
        createAudioBars();
        
        let isPlaying = false;
        document.getElementById('playBtn').addEventListener('click', function() {
            isPlaying = true;
            document.querySelectorAll('.audio-bar').forEach(bar => {
                bar.style.animationPlayState = 'running';
            });
            showNotification('üéµ ƒêang ph√°t nh·∫°c t√¢m linh...');
        });
        
        document.getElementById('pauseBtn').addEventListener('click', function() {
            isPlaying = false;
            document.querySelectorAll('.audio-bar').forEach(bar => {
                bar.style.animationPlayState = 'paused';
            });
            showNotification('‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng nh·∫°c');
        });
        
        document.getElementById('nextBtn').addEventListener('click', function() {
            const songs = [
                'H·∫ßu ƒê·ªìng Truy·ªÅn Th·ªëng',
                'T·ª© Ph·ªß Th√°nh M·∫´u',
                'L√™n ƒê·ªìng M·∫´u Th∆∞·ª£ng Thi√™n',
                'Nh·∫°c C√∫ng Tam Ph·ªß',
                'H√°t VƒÉn C·ªï Truy·ªÅn'
            ];
            const randomSong = songs[Math.floor(Math.random() * songs.length)];
            showNotification(`‚è≠Ô∏è Chuy·ªÉn sang: ${randomSong}`);
            createAudioBars();
        });
        
        // Fortune Wheel Game
        let isSpinning = false;
        const fortuneWheel = document.getElementById('fortuneWheel');
        const spinButton = document.getElementById('spinButton');
        
        const fortunes = [
            'B√¨nh an trong gia ƒë√¨nh - C√°c v·ªã th·∫ßn s·∫Ω b·∫£o v·ªá ng√¥i nh√† b·∫°n',
            'Th·ªãnh v∆∞·ª£ng ph√°t t√†i - T√†i l·ªôc s·∫Ω ƒë·∫øn t·ª´ m·ªçi ph∆∞∆°ng h∆∞·ªõng',
            'S·ª©c kh·ªèe d·ªìi d√†o - C∆° th·ªÉ kh·ªèe m·∫°nh, tinh th·∫ßn minh m·∫´n',
            'H·ªçc h√†nh ti·∫øn b·ªô - Tr√≠ tu·ªá s√°ng su·ªët, th√†nh t√≠ch v∆∞·ª£t tr·ªôi',
            'T√¨nh duy√™n vi√™n m√£n - T√¨nh y√™u ƒë·∫πp s·∫Ω ƒë·∫øn v·ªõi b·∫°n',
            'C√¥ng vi·ªác th√†nh ƒë·∫°t - S·ª± nghi·ªáp ph√°t tri·ªÉn r·ª±c r·ª°'
        ];
        
        spinButton.addEventListener('click', function() {
            if (isSpinning) return;
            
            isSpinning = true;
            spinButton.disabled = true;
            spinButton.textContent = 'üé≤ ƒêang Xoay...';
            
            const rotations = Math.random() * 360 + 1440; // At least 4 full rotations
            fortuneWheel.style.transform = `rotate(${rotations}deg)`;
            
            setTimeout(() => {
                const fortuneIndex = Math.floor((360 - (rotations % 360)) / 60);
                const selectedFortune = fortunes[fortuneIndex];
                
                document.getElementById('fortuneResult').innerHTML = `
                    <div style="
                        background: linear-gradient(45deg, var(--primary-gold), var(--secondary-orange));
                        color: var(--dark-blue);
                        padding: 2rem;
                        border-radius: 20px;
                        margin-top: 2rem;
                        text-align: center;
                        font-weight: bold;
                        box-shadow: 0 10px 30px rgba(255,215,0,0.4);
                        animation: fortuneReveal 1s ease-out;
                    ">
                        <h4 style="margin: 0 0 1rem 0; font-size: 1.3rem;">üîÆ L·ªùi Ti√™n Tri</h4>
                        <p style="margin: 0; font-size: 1.1rem; line-height: 1.6;">${selectedFortune}</p>
                    </div>
                `;
                
                isSpinning = false;
                spinButton.disabled = false;
                spinButton.textContent = 'üé≤ Xoay L·∫°i';
            }, 3000);
        });
        
        // Quiz System
        const quizQuestions = [
            {
                question: 'Trong t√≠n ng∆∞·ª°ng Tam Ph·ªß, c√≥ bao nhi·ªÅu cung ph·ªß ch√≠nh?',
                options: ['2 cung', '3 cung', '4 cung', '5 cung'],
                correct: 1,
                explanation: 'Tam Ph·ªß c√≥ nghƒ©a l√† "ba cung ph·ªß": Thi√™n Ph·ªß, ƒê·ªãa Ph·ªß v√† Th·ªßy Ph·ªß.'
            },
            {
                question: 'V·ªã th·∫ßn n√†o l√† ch·ªß nh√¢n c·ªßa Thi√™n Ph·ªß?',
                options: ['M·∫´u Tho·∫°i', 'M·∫´u Th∆∞·ª£ng Thi√™n', 'M·∫´u Th·ªßy', 'Th√°nh Tr·∫ßn'],
                correct: 1,
                explanation: 'M·∫´u Th∆∞·ª£ng Thi√™n l√† v·ªã n·ªØ th·∫ßn cao qu√Ω nh·∫•t, cai qu·∫£n Thi√™n Ph·ªß.'
            },
            {
                question: 'Nghi l·ªÖ h·∫ßu ƒë·ªìng ƒë∆∞·ª£c th·ª±c hi·ªán ƒë·ªÉ l√†m g√¨?',
                options: ['Gi·∫£i tr√≠', 'K·∫øt n·ªëi v·ªõi th·∫ßn linh', 'Thi ƒë·∫•u', 'H·ªçc t·∫≠p'],
                correct: 1,
                explanation: 'H·∫ßu ƒë·ªìng l√† nghi l·ªÖ t√¢m linh ƒë·ªÉ k·∫øt n·ªëi v√† giao ti·∫øp v·ªõi c√°c v·ªã th·∫ßn linh.'
            },
            {
                question: 'M·∫´u Th·ªßy cai qu·∫£n lƒ©nh v·ª±c n√†o?',
                options: ['N√∫i r·ª´ng', 'Bi·ªÉn c·∫£ v√† s√¥ng ng√≤i', 'Tr·ªùi m√¢y', 'ƒê·∫•t ƒëai'],
                correct: 1,
                explanation: 'M·∫´u Th·ªßy l√† ch·ªß nh√¢n c·ªßa Th·ªßy Ph·ªß, cai qu·∫£n bi·ªÉn c·∫£, s√¥ng ng√≤i v√† ngu·ªìn n∆∞·ªõc.'
            },
            {
                question: 'Th√°nh Tr·∫ßn ƒë∆∞·ª£c bi·∫øt ƒë·∫øn v·ªõi vai tr√≤ g√¨?',
                options: ['Th·∫ßn t√¨nh y√™u', 'V·ªã th√°nh b·∫£o v·ªá', 'Th·∫ßn m√πa m√†ng', 'Th·∫ßn bi·ªÉn c·∫£'],
                correct: 1,
                explanation: 'Th√°nh Tr·∫ßn l√† v·ªã th√°nh d≈©ng m√£nh, b·∫£o v·ªá d√¢n l√†ng kh·ªèi t√† ma v√† tai h·ªça.'
            },
            {
                question: 'ƒê·∫°o M·∫´u c√≥ ngu·ªìn g·ªëc t·ª´ ƒë√¢u?',
                options: ['Trung Qu·ªëc', '·∫§n ƒê·ªô', 'Vi·ªát Nam', 'Th√°i Lan'],
                correct: 2,
                explanation: 'ƒê·∫°o M·∫´u l√† t√≠n ng∆∞·ª°ng b·∫£n ƒë·ªãa c·ªßa Vi·ªát Nam, c√≥ ngu·ªìn g·ªëc t·ª´ vƒÉn h√≥a c·ªï x∆∞a.'
            }
        ];
        
        let currentQuestionIndex = 0;
        let quizScore = 0;
        let totalQuestions = 0;
        
        function loadQuestion() {
            if (currentQuestionIndex >= quizQuestions.length) {
                currentQuestionIndex = 0;
            }
            
            const question = quizQuestions[currentQuestionIndex];
            document.getElementById('quizQuestion').textContent = question.question;
            
            const optionsContainer = document.getElementById('quizOptions');
            optionsContainer.innerHTML = '';
            
            question.options.forEach((option, index) => {
                const optionElement = document.createElement('div');
                optionElement.className = 'quiz-option';
                optionElement.textContent = option;
                optionElement.addEventListener('click', () => selectAnswer(index, question.correct, question.explanation));
                optionsContainer.appendChild(optionElement);
            });
            
            document.getElementById('nextQuestion').style.display = 'none';
        }
        
        function selectAnswer(selected, correct, explanation) {
            totalQuestions++;
            
            const options = document.querySelectorAll('.quiz-option');
            options.forEach((option, index) => {
                option.style.pointerEvents = 'none';
                if (index === correct) {
                    option.classList.add('correct');
                } else if (index === selected && selected !== correct) {
                    option.classList.add('wrong');
                }
            });
            
            if (selected === correct) {
                quizScore++;
                showNotification('üéâ Ch√≠nh x√°c! ' + explanation);
            } else {
                showNotification('‚ùå Sai r·ªìi! ' + explanation);
            }
            
            document.getElementById('quizScore').textContent = `ƒêi·ªÉm: ${quizScore}/${totalQuestions}`;
            document.getElementById('nextQuestion').style.display = 'inline-block';
        }
        
        document.getElementById('nextQuestion').addEventListener('click', function() {
            currentQuestionIndex++;
            loadQuestion();
        });
        
        // Initialize quiz
        loadQuestion();
        
        // Theme Toggle
        document.getElementById('themeToggle').addEventListener('click', function() {
            document.body.classList.toggle('light-mode');
            showNotification(document.body.classList.contains('light-mode') ? '‚òÄÔ∏è Ch·∫ø ƒë·ªô s√°ng' : 'üåô Ch·∫ø ƒë·ªô t·ªëi');
        });
        
        // Utility Functions
        function showNotification(message) {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 100px;
                right: 2rem;
                background: linear-gradient(45deg, var(--primary-gold), var(--secondary-orange));
                color: var(--dark-blue);
                padding: 1rem 2rem;
                border-radius: 25px;
                font-weight: bold;
                z-index: 10001;
                animation: slideInRight 0.5s ease-out;
                box-shadow: 0 10px 30px rgba(255,215,0,0.4);
                max-width: 300px;
                word-wrap: break-word;
            `;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.animation = 'slideOutRight 0.5s ease-in forwards';
                setTimeout(() => notification.remove(), 500);
            }, 3000);
        }
        
        function performPrayer(deityName) {
            const prayers = [
                `ƒê√£ g·ª≠i l·ªùi c·∫ßu kh·∫•n ƒë·∫øn ${deityName}. Ph∆∞·ªõc l√†nh s·∫Ω ƒë·∫øn v·ªõi b·∫°n! üôè`,
                `${deityName} ƒë√£ nh·∫≠n ƒë∆∞·ª£c l·ªùi c·∫ßu c·ªßa b·∫°n. H√£y gi·ªØ l√≤ng th√†nh k√≠nh! ‚ú®`,
                `L·ªùi c·∫ßu ƒë·∫øn ${deityName} ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n. May m·∫Øn s·∫Ω ƒëi c√πng b·∫°n! üåü`
            ];
            showNotification(prayers[Math.floor(Math.random() * prayers.length)]);
        }
        
        function learnMore(deityName) {
            showNotification(`üìö T√¨m hi·ªÉu th√™m v·ªÅ ${deityName} trong ph·∫ßn Ki·∫øn Th·ª©c!`);
            document.getElementById('quiz').scrollIntoView({ behavior: 'smooth' });
        }
        
        // Add CSS animations dynamically
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            
            @keyframes slideOutRight {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
            
            @keyframes modalFadeIn {
                from { opacity: 0; transform: scale(0.8); }
                to { opacity: 1; transform: scale(1); }
            }
            
            @keyframes blessingGlow {
                0% { box-shadow: 0 0 20px rgba(255,215,0,0.3); }
                100% { box-shadow: 0 0 40px rgba(255,215,0,0.6); }
            }
            
            @keyframes fortuneReveal {
                0% { transform: translateY(50px); opacity: 0; }
                100% { transform: translateY(0); opacity: 1; }
            }
        `;
        document.head.appendChild(style);
        
        // Easter Eggs
        let konamiCode = [];
        const konamiSequence = [38, 38, 40, 40, 37, 39, 37, 39, 66, 65];
        
        document.addEventListener('keydown', function(e) {
            konamiCode.push(e.keyCode);
            if (konamiCode.length > 10) {
                konamiCode.shift();
            }
            
            if (konamiCode.join(',') === konamiSequence.join(',')) {
                activateSecretMode();
                konamiCode = [];
            }
        });
        
        function activateSecretMode() {
            document.body.style.animation = 'mysticalShift 3s ease-in-out';
            
            // Create rainbow effects
            const rainbowStyle = document.createElement('style');
            rainbowStyle.textContent = `
                .rainbow-mode * {
                    animation: rainbow 2s linear infinite !important;
                }
                @keyframes rainbow {
                    0% { filter: hue-rotate(0deg); }
                    100% { filter: hue-rotate(360deg); }
                }
            `;
            document.head.appendChild(rainbowStyle);
            document.body.classList.add('rainbow-mode');
            
            showNotification('üåà Ch·∫ø ƒë·ªô b√≠ m·∫≠t ƒë√£ k√≠ch ho·∫°t! Tam Ph·ªß trong s·∫Øc c·∫ßu v·ªìng! üåà');
            
            setTimeout(() => {
                document.body.classList.remove('rainbow-mode');
                rainbowStyle.remove();
                document.body.style.animation = '';
            }, 10000);
        }
        
        // Performance optimization
        let ticking = false;
        function updateScrollEffects() {
            if (!ticking) {
                requestAnimationFrame(() => {
                    // Update scroll-based animations here
                    ticking = false;
                });
                ticking = true;
            }
        }
        
        window.addEventListener('scroll', updateScrollEffects);
        
        // Initialize everything
        console.log('üèÆ Tam Ph·ªß 3D Website Loaded Successfully! üåü');
        showNotification('üèÆ Ch√†o m·ª´ng ƒë·∫øn v·ªõi th·∫ø gi·ªõi Tam Ph·ªß! üåü');
    </script>
</body>
</html>
